/**
 * @링크 https://school.programmers.co.kr/learn/courses/30/lessons/120866
 * @풀이방식
 * 새로운 배열을 만들고 폭탄 주변의 flag 변경
 * @다른사람의_풀이
 * 폭탄이 아닌, 폭탄 주변을 확인. Array.some() 활용
 *    let outside = [[-1,0], [-1,-1], [-1,1], [0,-1],[0,1],[1,0], [1,-1], [1,1]];
 *    let safezone = 0;
 *
 *    board.forEach((row, y, self) => row.forEach((it, x) => {
 *        if (it === 1) return false;
 *        return outside.some(([oy, ox]) => !!self[oy + y]?.[ox + x])
 *               ? false : safezone++;
 *    }));
 *
 *    return safezone;
 * }
 */
function solution(board) {
  const n = board.length;
  const map = Array.from({length: n}, ()=>Array(n).fill(1));
  let answer = n*n;
  
  const bomb = (x,y) => {
      if(x<0 || x>=n || y<0 || y>=n || map[x][y] === 0) return;
      map[x][y] = 0;
      answer--;
  }
  
  for(let x=0; x<n; x++) {
      for(let y=0; y<n; y++) {
          if(board[x][y] === 1) {
              bomb(x-1,y-1);
              bomb(x-1,y);
              bomb(x-1,y+1);
              bomb(x,y-1);
              bomb(x,y);
              bomb(x,y+1);
              bomb(x+1,y-1);
              bomb(x+1,y);
              bomb(x+1,y+1);
          }
      }
  }
  return answer;
}

console.log(solution([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0]]) === 16);
console.log(solution([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]]) === 13);
console.log(solution([[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]) === 0);